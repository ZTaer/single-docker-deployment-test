name: CI and Deploy to AWS Elastic Beanstalk

on:
  push:
    branches:
      - main # 触发 CI 的分支
  pull_request:
    branches:
      - main
  workflow_dispatch: # 允许手动触发工作流
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest # 指定工作流运行的环境
    steps:
      # 步骤 1: 检出代码
      - name: Checkout code
        uses: actions/checkout@v4
        # 说明: 使用官方的 actions/checkout@v4 Action 将仓库代码检出到 GitHub Actions 的 runner 环境中。
        # 目的: 确保后续步骤能够访问到最新的项目文件。

      # 步骤 2: 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        # 说明: 使用官方的 docker/setup-buildx-action@v2 Action 安装和设置 Docker Buildx。
        # 目的: 提供更高效的 Docker 镜像构建能力，并支持多平台构建和缓存导出等高级功能。

      # 步骤 3: 构建 Docker 镜像
      - name: Build Docker image
        run: docker build -t oo7/docker-react-test -f ./Dockerfile.dev .
        # 说明: 使用 docker build 命令构建 Docker 镜像。
        # 目的: 构建一个名为 oo7/docker-react-test 的 Docker 镜像，使用项目根目录中的 Dockerfile.dev 文件。

      # 步骤 4: 运行格式化 ( 代替测试示例 )
      - name: Run lint
        run: docker run -e CI=true oo7/docker-react-test yarn lint
        # 说明: 使用 docker run 命令运行构建好的 Docker 镜像，并执行 yarn lint 命令进行代码格式检查。
        # 目的: 在 Docker 容器中运行代码格式检查，以确保代码在隔离环境中能正常工作。

  build:
    needs: lint # 确保 build 作业在 lint 作业完成后运行
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # 仅当推送到 main 分支时部署
    steps:
      - name: Generate deployment package
        run: zip -r deploy.zip . -x '*.git*'

      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v18
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: github-actions-docker
          environment_name: Github-actions-docker-env
          existing_bucket_name: elasticbeanstalk-ap-east-1-863942635279
          region: ap-east-1
          version_label: deploy-${{ github.run_number }}
          deployment_package: deploy.zip

    # steps:
    #   - name: Checkout code
    #     uses: actions/checkout@v4

    #   - name: Set up Docker Buildx
    #     uses: docker/setup-buildx-action@v2

    #   - name: Build Docker image
    #     run: docker build -t oo7/docker-react-test-prod .

    #     # 保存镜像为 tar 文件
    #   - name: Save Docker image to tar
    #     run: docker save oo7/docker-react-test-prod -o deploy-${{ github.run_number }}.zip
    #     # 说明: 将 Docker 镜像保存为 tar 文件。

    #   - name: Deploy to EB
    #     uses: einaregilsson/beanstalk-deploy@v22
    #     with:
    #       aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #       application_name: github-actions-docker
    #       environment_name: Github-actions-docker-env
    #       version_label: deploy-${{ github.run_number }}
    #       region: ap-east-1
    #       deployment_package: deploy-${{ github.run_number }}.zip
    #       s3_bucket: elasticbeanstalk-ap-east-1-863942635279
    #       s3_key: github-actions-docker/deploy-${{ github.run_number }}.zip

  #     - name: Upload to S3
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       run: |
  #         aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
  #         aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
  #         aws configure set default.region ap-east-1
  #         # 说明: 将打包的应用上传到 S3。
  #         aws s3 cp deploy.zip s3://elasticbeanstalk-ap-east-1-863942635279/github-actions-docker/deploy-${{ github.run_number }}.zip
  #         aws s3 ls s3://elasticbeanstalk-ap-east-1-863942635279/github-actions-docker/

  # deploy:
  #   needs: build # 确保 deploy 作业在 build 作业完成后运行
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' # 仅当推送到 main 分支时部署

  #   steps:
  #     - name: Deploy to EB
  #       uses: einaregilsson/beanstalk-deploy@v22
  #       with:
  #         aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         application_name: github-actions-docker
  #         environment_name: Github-actions-docker-env
  #         version_label: deploy-${{ github.run_number }}
  #         s3_bucket: elasticbeanstalk-ap-east-1-863942635279
  #         s3_key: github-actions-docker/deploy-${{ github.run_number }}.zip
  #         region: ap-east-1
  #       # 说明: 使用 einaregilsson/beanstalk-deploy Action 将应用部署到 AWS Elastic Beanstalk。
