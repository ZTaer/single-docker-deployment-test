name: CI and Deploy to AWS Elastic Beanstalk

on:
  push:
    branches:
      - main # 触发 CI 的分支
  pull_request:
    branches:
      - main
  workflow_dispatch: # 允许手动触发工作流
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest # 指定工作流运行的环境
    steps:
      # 步骤 1: 检出代码
      - name: Checkout code
        uses: actions/checkout@v4
        # 说明: 使用官方的 actions/checkout@v4 Action 将仓库代码检出到 GitHub Actions 的 runner 环境中。
        # 目的: 确保后续步骤能够访问到最新的项目文件。

      # 步骤 2: 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        # 说明: 使用官方的 docker/setup-buildx-action@v2 Action 安装和设置 Docker Buildx。
        # 目的: 提供更高效的 Docker 镜像构建能力，并支持多平台构建和缓存导出等高级功能。

      # 步骤 3: 构建 Docker 镜像
      - name: Build Docker image
        run: docker build -t oo7/docker-react-test -f ./Dockerfile.dev .
        # 说明: 使用 docker build 命令构建 Docker 镜像。
        # 目的: 构建一个名为 oo7/docker-react-test 的 Docker 镜像，使用项目根目录中的 Dockerfile.dev 文件。

      # 步骤 4: 运行格式化 ( 代替测试示例 )
      - name: Run lint
        run: docker run -e CI=true oo7/docker-react-test yarn lint
        # 说明: 使用 docker run 命令运行构建好的 Docker 镜像，并执行 yarn lint 命令进行代码格式检查。
        # 目的: 在 Docker 容器中运行代码格式检查，以确保代码在隔离环境中能正常工作。

  build:
    needs: lint # 确保 build 作业在 lint 作业完成后运行
    runs-on: ubuntu-latest # 指定工作流运行的环境
    if: github.ref == 'refs/heads/main' # 仅当推送到 main 分支时部署
    steps:
      # 步骤 1: 检出代码
      - name: Init
        uses: actions/checkout@v3
        # 说明: 使用官方的 actions/checkout@v3 Action 将仓库代码检出到 GitHub Actions 的 runner 环境中。
        # 目的: 确保后续步骤能够访问到最新的项目文件。

      # 步骤 2: 生成部署包
      - name: Generate deployment package
        run: zip -r deploy.zip . -x '*.git*'
        # 说明: 使用 zip 命令将当前目录下的文件打包成 deploy.zip 文件，并排除 .git 目录。
        # 目的: 生成包含应用程序代码的部署包，以便后续上传到 AWS Elastic Beanstalk。

      # 步骤 3: 部署到 AWS Elastic Beanstalk
      #   a) 注意: AWS Elastic Beanstalk 部署的是Docker和源码，不是Docker镜像
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v18
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ vars.AWS_APPLICATION_NAME }}
          environment_name: ${{ vars.AWS_ENVIRONMENT_NAME }}
          existing_bucket_name: ${{ vars.AWS_EXISTING_BUCKET_NAME }}
          region: ${{ vars.AWS_REGION }}
          version_label: deploy-${{ github.run_id }}
          deployment_package: deploy.zip
          use_existing_version_if_available: true # 如果已存在相同版本，则使用该版本, 方便回滚项目
        # 说明: 使用 einaregilsson/beanstalk-deploy@v18 Action 将生成的部署包上传并部署到 AWS Elastic Beanstalk。
        # 目的: 自动化部署应用程序到 Elastic Beanstalk，确保每次代码变更后都能及时部署最新版本。
