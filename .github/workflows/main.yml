name: CI

on:
  push:
    branches:
      - main # 你希望触发 CI 的分支
  pull_request:
    branches:
      - main
  workflow_dispatch: # 允许手动触发工作流
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest # 指定工作流运行的环境

    steps:
      # 步骤 1: 检出代码
      - name: Checkout code
        uses: actions/checkout@v2
        # 说明: 使用官方的 actions/checkout@v2 Action 将仓库代码检出到 GitHub Actions 的 runner 环境中。
        # 目的: 确保后续步骤能够访问到最新的项目文件。

      # 步骤 2: 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        # 说明: 使用官方的 docker/setup-buildx-action@v2 Action 安装和设置 Docker Buildx。
        # 目的: 提供更高效的 Docker 镜像构建能力，并支持多平台构建和缓存导出等高级功能。

      # 步骤 3: 构建 Docker 镜像
      - name: Build Docker image
        run: docker build -t oo7/docker-react-test -f ./Dockerfile.dev .
        # 说明: 使用 docker build 命令构建 Docker 镜像。
        # 目的: 构建一个名为 react-test 的 Docker 镜像，使用项目根目录中的 Dockerfile.dev 文件。

      # 步骤 4: 运行测试
      - name: Run tests
        run: docker run -e CI=true oo7/docker-react-test yarn lint
        # 说明: 使用 docker run 命令运行构建好的 Docker 镜像，并执行 yarn test 命令进行测试。
        # 目的: 在 Docker 容器中运行测试，以确保代码在隔离环境中能正常工作。
